// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  role            Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  //  FOREIGN KEY
  Avatar          Avatar[]
  Press_release   Press_release[]
  Blog            Blog[]
}

model Author {
  id              Int      @id @default(autoincrement())
  name            String
  avatar_id       Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


  //    RELATION
  avatar          Avatar @relation(fields: [avatar_id], references: [id])

  //    FOREIGN KEY
  Press_release   Press_release[]
  BLog            Blog[]

}

model Biodata {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  phone             String
  nama_lengkap      String
  avatar_id         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  //   RELATION
  avatar            Avatar    @relation(fields: [avatar_id], references: [id])
  //  FORENGKY
  Address           Address[]
}


model Avatar {
  id                            Int      @id @default(autoincrement())
  filename                      String
  location                      String
  users_id                      Int
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt


  //    RELATION
  users                         Users @relation(fields: [users_id], references: [id])

  //  Foreign key
  biodata                       Biodata[]
  author                        Author[]
}


model Address {
  id                Int      @id @default(autoincrement())
  nama_lengkap      String
  biodata_id        Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  //    RELATION
  Biodata     Biodata    @relation(fields: [biodata_id], references: [id])
}

model Section_text {
  id                Int      @id @default(autoincrement())
  name              String
  title             String
  description       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  //     Foreign key
}

model Main_banner {
  id                Int      @id @default(autoincrement())
  url               String
  description       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Banner_image {
  id                Int      @id @default(autoincrement())
  url               String
  description       String
  page              String
  filename          String
  location          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Config {
  id                Int      @id @default(autoincrement())
  name              String
  title             String
  description       String
  mete_title        String
  meta_description  String
  meta_image        String
  meta_url          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  //    relasi
}

model Section_banner {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  url               String
  link              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Millesstone {
  id                Int      @id @default(autoincrement())
  years             String
  title             String
  description       String
  photo             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Product {
  id                Int      @id @default(autoincrement())
  name              String
  logo              String
  background        String
  youtube_link      String
  instagram_link    String
  twitter_link      String
  category_id       Int
  description       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  //    RELATION
  category          Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model Blog {
  id                Int      @id @default(autoincrement())
  title             String
  slug              String
  tags              String
  description       String
  relase_date       DateTime
  excrept           String
  mete_title        String
  meta_tags         String
  meta_description  String
  visited_count     Int
  flag              String
  users_id          Int
  author_id         Int
  media_id          Int
  category          Category_media
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  //    RELATION
  users             Users   @relation(fields: [users_id], references: [id], onDelete: Cascade)
  author            Author  @relation(fields: [author_id], references: [id], onDelete: Cascade)
  media             Media   @relation(fields: [media_id], references: [id], onDelete: Cascade)
}

model Press_release {
  id                Int      @id @default(autoincrement())
  title             String
  slug              String
  tags              String
  description       String
  relase_date       DateTime
  excrept           String
  mete_title        String
  meta_tags         String
  meta_description  String
  visited_count     Int
  flag              String
  users_id          Int
  author_id         Int
  media_id          Int
  category_id       Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  //    RELATION
  users             Users    @relation(fields: [users_id], references: [id], onDelete: Cascade)
  author            Author   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  media             Media    @relation(fields: [media_id], references: [id], onDelete: Cascade)
  category          Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
}
  

model Category {
    id                Int      @id @default(autoincrement())
    name              String
    slug              String
    updatedAt         DateTime @updatedAt
    createdAt         DateTime @default(now())

    //    FOREIGN KEY
    Press_release     Press_release[]
    Product           Product[]
}

model Media {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  type              String
  extention         String
  filename          String
  location          String
  media_meta        String
  media_url         String
  image_source      String
  status            Status
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  //      FOREIGN KEY
  Press_release     Press_release[]
  BLog              Blog[]
}

model Current_opening {
  id                Int      @id @default(autoincrement())
  position          String
  description       String
  location          String
  type              Type
  valid_until       DateTime
  apply_link        String
  status            Status
  total_view        Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Category_media {
  content
  media_platfrom
  commercial
  other
}

enum Type {
  fulltime
  freelance
}

enum Status {
  avtive
  inactive
}

enum Role {
  admin
  users
}